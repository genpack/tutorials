You can create an account in AWS. There could be multiple services under one account.
These services could be:

EC2 : A virtual machine
S3: Acts like an external hard drive
EC: Elastic Container (you can deploy ducker container images) 
commitSource: Git repositories 
and …

You can also define users (AWS calls them IAM user)
Each IAM user has a secret key and a key ID

Each user has a master username and password to aws console

Any admin can define roles for you in his/her account.
You need to accept roles (they call it assume roles) after an AWS administrator has configured a role and given you the account and role. You can do that in AWS console: via the drop down on the top right bar. Click on your name and then "Switch Role". Fill the account id and specify the role you'd like to assume.


So one user can have multiple roles in multiple accounts

For a user to access repositories in an account given a role:

To see repos in browser, you can go to aws console and then:


Click ‘Services’ on top left and choose CodeCommit. (Either type it in the bar or choose from the left pane)
Make sure you are on the right role and the right geographic area (US, Sydney, …)

Now if you have given access to the repo, you should be at least able to see the repo in the browser.

To clone a local copy, you need to install and configure aws cli (denotes for command line interface) as well as install and configure git

You can setup for ssh access or https access. For https connection:
1- install aws cli:  (Link: https://docs.aws.amazon.com/cli/latest/userguide/cli-install-macos.html#install-bundle-macos-os-prereq)
1-1   install python first. aws cli requires Python 3 version 3.3+
1-2  Download aws bundle installer & unzip the package:
    curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o    "awscli-bundle.zip"
    unzip awscli-bundle.zip
1-3  Run and install the executable:
       sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws

You can also use pip directly to install AWS CLI:

To install the AWS CLI on macOS
  1-1     Install pip with the script provided by the Python Packaging Authority:
         curl -O https://bootstrap.pypa.io/get-pip.py
     python3 get-pip.py --user
		
	1-2 	Use pip to install the AWS CLI: $ pip3 install awscli --upgrade --user 
	1-3 	Verify that the AWS CLI is installed correctly. $ aws --version

You should see sth like this: 
	  AWS CLI 1.11.84 (Python 3.6.1)
		
(To upgrade to the latest version, run the installation command again:)
    pip3 install awscli --upgrade --user

2 - Now that you have installed aws cli, you should configure it with your credentials

      $ aws configure

This creates a folder named .aws in your home folder:  ~/.aws/

in this folder, there are two files:

config
credentials

file credentials looks like this:

[default]
aws_access_key_id = AKIAIZ43BKARSSRW62ZQ
aws_secret_access_key = pj2FWTDqzAcQ4q40EJ6gyWewQrzOdnyP/Hq0J3s6

[another_name]
aws_access_key_id = another_key_id
aws_secret_access_key = another_secret_key

…

You can define multiple credentials in aws cli configuration and give them different names. In this file, you can simply store multiple credentials with their associated key ids and secret keys

file ‘config’ looks like this:

[default]
region = ap-southeast-2

[profile write@ai-poc]
role_arn = arn:aws:iam::864206818498:role/write
source_profile = default

[profile read@another_user_role]
role_arn = arn:aws:iam::<an account number>:role/read
source_profile = default



Now I tell you what each line means:

In this file, you connect user roles you have to credentials introduced in the other file, by defining profiles.
You can define multiple profiles as many as you want


Now you should be able to run this:

$ aws s3 ls --profile write@ai-poc

write@ai-poc is an example of a user role within an account

You may see something like this: (could be list of S3 services within the account ai-poc, that the user has access to

2018-07-29 23:35:14 angular.demo.elulaservices.com
2018-07-23 19:08:53 api.aipoc.elulaservices.com
2018-07-17 14:53:05 aws-logs-864206818498-ap-southeast-2
2018-07-19 20:11:20 dataiku.k8s.local
2018-07-23 11:34:55 elasticbeanstalk-ap-southeast-2-864206818498
2018-07-19 18:19:40 k8s.elulaservices.com
2018-10-29 16:25:16 library.elulaservices.com
2018-07-17 14:32:17 poc-ai.elulaservices.com
2018-10-23 13:40:57 sticky.dummy.elula.ai
2018-10-30 16:46:07 wonderlake-orange

If this works, now you should be able to configure git

go to the home folder and edit file .gitconfig (you need to have installed git previously)

$ cd ~/
$ vi .gitconfig

add this block to the end of the file:

[credential “repository_url”]
    helper = !aws codecommit credential-helper --profile=profile_name $@
    UseHttpPath = true

example:

[credential "https://git-codecommit.ap-southeast-2.amazonaws.com/v1/repos/sticky"]
    helper = !aws codecommit credential-helper --profile=write@ai-poc $@
    UseHttpPath = true


If it did not work, try replacing !aws with the actual address of your aws:
First find the aws address:
$ which aws

Example:
[credential "https://git-codecommit.ap-southeast-2.amazonaws.com/v1/repos/sticky"]
    helper = /usr/local/bin/aws codecommit credential-helper --profile=write@ai-poc $@
    UseHttpPath = true

You should also change this file:

sudo vim /Library/Developer/CommandLineTools/usr/share/git-core/gitconfig

  
      
You may see credentials might have been already set to the OS keychain. Just comment the lines:

# [credential]
#       helper = osxkeychain


You should now be able to clone a repo:

$ git clone repo_url

and if you have done everything correctly, it should not ask for any user and password!



Useful links:
https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup        


To find out what s3 buckets you have access to under a particular role:
$ aws s3 ls --profile write@ai-poc

To find out what codecommit repositories you have access to under a particular role:

$ aws codecommit list-repositories --profile write@ai-poc

Sourcetree may refer to a different .gitconfig file,
To edit that file, goto source tree --> repository --> repository settings --> advanced --> Edit config file


